###################################################################

## Vidéo 1 (fonction génératrice)

CO12AL-W4-VIDEO01.txt

## Compléments Vidéo 1

*parler des expressions génératrice et de leur intérêt (faible occupation
mémoire)
(x**6 + 3*x for x in xrange(100000000))

*redonner le lien vers http://python-history.blogspot.fr/2010/06/from-list-comprehensions-to-generator.html 
déjà cité en W3, VIDEO8
*faire un test de performance avec timeit pour montrer que les 
expressions génératrices sont un peu plus lente que les compréhensions


## Quizz Vidéo 1

## Exercices Vidéo 1


###################################################################

## Vidéo 2 (espaces de nommage)

CO12AL-W4-VIDEO02.txt

## Compléments Vidéo 2

*introduire __dict__, globals(), locals() et dir(mod) dans le contexte
des modules uniquement. (on parlera de __dict__ pour les classes
et les instance plus tard, mais tu peux déjà y faire allusion)

*introduire sys.modules

*parler de l'impossibilité de faire __dict__ du module courant
(en particulier du prompt interactif) et expliquer que l'on 
ne peut y accéder que depuis sys.modules[__name__].__dict__
Citer 
http://docs.python.org/2.6/tutorial/classes.html#id2
et
http://stackoverflow.com/questions/4877290/what-is-the-dict-dict-attribute-of-a-python-class

## Quizz Vidéo 2

## Exercices Vidéo 2


###################################################################

## Vidéo 3 (importatation des modules : compilation et chemin de recherche)

CO12AL-W4-VIDEO03.txt

## Compléments Vidéo 3

*exécuter un module comme un script avec 
if __name__ == '__main__':

*parler de sys.builtin_module_names et de, par exemple, math 
et sys, qui sont des modules built-in implémentés en C pour
des questions de vitesse. 

*compléter la discussion de la video sur les .pyc. Par exemple,
on peut directement distribuer les .pyc sans les .py

*parler de reload() et du problème classique de modifier un module,
l'importer de nouveau et ne pas voir les modifications. 

## Quizz Vidéo 3

## Exercices Vidéo 3

###################################################################

## Vidéo 4 (importation des modules : import et from )

CO12AL-W4-VIDEO04.txt

## Compléments Vidéo 4

*introduire 
import modulename as name
et
from modulename import attrname as name

*introduire 
from mod import *
en expliquant qu'il ne faut jamais le faire avec des modules
que l'on n'a pas écrit nous même parce qu'il y a un fort risque
de collision des espaces de nommage
Citer https://docs.python.org/2.7/reference/simple_stmts.html#the-import-statement
Introduire aussi les variables commençant par _ en expliquant que 
l'on ne doit pas les modifier et qu'elles ne sont pas importée par 
un import *

## Quizz Vidéo 4

## Exercices Vidéo 4

###################################################################

## Vidéo 5 (Programmation objet, concepts de base)

## Compléments Vidéo 5

## Quizz Vidéo 5

## Exercices Vidéo 5

###################################################################

## Vidéo 6 (Programmation objet: classes et instances)

## Compléments Vidéo 6

## Quizz Vidéo 6

## Exercices Vidéo 6

###################################################################

## Vidéo 7 ()

## Compléments Vidéo 7

## Quizz Vidéo 7

## Exercices Vidéo 7

###################################################################

## Vidéo 8 ()

## Compléments Vidéo 8

## Quizz Vidéo 8

## Exercices Vidéo 8

###################################################################

## Vidéo 9 ()

## Compléments Vidéo 9

## Quizz Vidéo 9

## Exercices Vidéo 9

###################################################################

## Vidéo 10 ()

## Compléments Vidéo 10

## Quizz Vidéo 10

## Exercices Vidéo 10

###################################################################

## Vidéo 11 ()

## Compléments Vidéo 11

## Quizz Vidéo 11

## Exercices Vidéo 11

###################################################################

## Vidéo 12 ()

## Compléments Vidéo 12

## Quizz Vidéo 12

## Exercices Vidéo 12