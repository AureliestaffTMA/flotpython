# XXX j'utilise pour l'instant des noms plus simples qui  
# me permettent mieux de m'y retrouver, je renommerai le tout plus tard  

## Vidéo 1 (objets, variables, typage dynamique)

CO12AL-W2-VIDEO01.txt

## Compléments Vidéo 1

OK noms-variables.ipynb : noms de variables

## Quizz Vidéo 1 

## Exercices Vidéo 1

###################################################################

## Vidéo 2 (types numériques : int, long, float, complex, bool)

CO12AL-W2-VIDEO02.txt

## Compléments Vidéo 2

OK calculette.ipynb : utiliser python comme une calculette - introduit aussi les conversions
OK precision-flottants.ipynb : limitation de la précision des floats  
OK entiers-bitwise.ipynb : opérations bitwise : et/ou/ou exclusifs décalages 
OK affectations-operations.ipynb : illustrer += et les autres variantes, mentionner les autres types

## Quizz Vidéo 2 
OK types-numeriques.quiz

## Exercices Vidéo 2 
OK exo-flottants-min.ipynb : exercice pour trouver la valeur approximative du + petit flottant 

###################################################################

## Vidéo 3 (séquences)

CO12AL-W2-VIDEO03.txt

## Compléments Vidéo 3 

# deprecated-slicing-step.ipynb : était un notebook sur les slicing avec pas (a:b:c)
# en fait cela etait couvert dans les slides mais je n'avais vu que la page 1

## Quizz Vidéo 3 

OK generic-slicing.quiz : opérations génériques sur les séquences en prenant une str comme exemple 

## Exercices Vidéo 3 
OK exo-slicing.ipynb: un peu de slicing, et des indices négatifs, le slicing avec pas, utilisation de la longueur

###################################################################

## Vidéo 4 (les listes)

CO12AL-W2-VIDEO04.txt (9 minutes)

## Compléments Vidéo 4 

XXX thierry: voir si on conserve la fin (qui passe une fonction en
# parametre...) à cet endroit ou si on bouge ça + tard dans le cours  
OK listes-sort.ipynb : sort avec les paramètres reverse, et sur des strings 
#buffer : XXX thierry je connais pas du tout; voir la note concernant bytearray + bas

## Quizz Vidéo 4 
OK listes.quiz : pop append extend del sort sorted (j'utilise aussi += a un moment)

## Exercices Vidéo 4 

###################################################################

## Vidéo 5 (les tuples)

CO12AL-W2-VIDEO05 ()

## Compléments Vidéo 5  

OK tuple-commas : les différentes syntaxes (avec ou sans parenthèses, avec ou sans virgule terminale
                               le cas des tuples à un élément; la fonction tuple pour convertir une liste 
			       digression sur les noms de fonctions prédéfinies

OK affectations-filtrage : a,b = tuple - je parle aussi de retrouver 3 dans ['abc', [(1,2), ([3], 4)], 5]

## Quizz Vidéo 5 
OK tuples.quiz

## Exercices Vidéo 5 

###################################################################

## Vidéo 6 (101 if else)

CO12AL-W2-VIDEO06.txt (5 minutes 40 secondes)

## Compléments Vidéo 6
OK bool-expressions.ipynb : introduire les opérateurs logiques - expliquer <> pour !=, obsolète mais dans du code ancien 
OK indentations.ipynb : imbrications, espaces vs tabulations, utilisez des indentations de 4 espaces
OK elif.ipynb : if elif else - évaluation paresseuse
OK if-expression.ipynb: return 0 if n<=1 else n*factoriel (n-1)

## Quizz Vidéo 6
# J'arrive un peu à la limite du quiz car je ne sais pas si je peux mettre des réponses
# sur plusieurs lignes dans les questions a choix multiples

## Exercices Vidéo 6
# je postpone à après la vidéo 7 car on aura les fonctions; bref pas d'exo après cette vidéo-là

###################################################################

## Vidéo 7 (101 boucle for et fonctions)

CO12AL-W2-VIDEO07.txt 

## Compléments Vidéo 7 
OK for-multi.ipynb: affectation a,b dans un for, la fonction zip
OK for-comprehension.ipynb: [ exp(x) for x in .... if ] - XXX reduce ?
OK listes-sort-functions.ipynb : suite de listes-sort: sort avec le paramètre key (une fonction), et sorted 
OK function-return.ipynb : il nous faut 'return' pour les exercices please 

## Quizz Vidéo 7

## Exercices Vidéo 7 
OK exo-if.ipynb : une petite fonction qui calcule si deux entiers sont divisibles ou pas
OK exo-for.ipynb : trier toutes les listes dans une liste; idem avec une direction

###################################################################

## Vidéo 8 (str)

CO12AL-W2-VIDEO08.txt 

## Compléments Vidéo 8 
OK string-formatting.ipynb : format et % - je laisse tomber rjust/ljust/center pour le moment
OK string-tools.ipynb : # help(str)  #split join  #replace strip #index find rfind count startswith endswith upper lower swapcase capitalize title  renvoie sur la doc
TODO raw_input

TODO:pending- unicode.ipynb : je propose de bouger ça carrément en semaine 7

# XXX bytearray : je connaissais pas du tout ce truc non plus, après une lecture rapide j'ai le sentiment que ça a / peut avoir un lien avec buffer; je propose de bouger ces deux trucs en semaine 7 - ou de virer complètement, ou d'en parler très très vite. 


## Quizz Vidéo 8
TODO strings.quiz - le quiz se prete bien surement aux basiques des strings
le string n'est pas mutable
les methodes sur les strings
le formattage
unicode ?

## Exercices Vidéo 8

###################################################################

## Vidéo 9 (tables de hash)

CO12AL-W2-VIDEO09.txt 

## Compléments Vidéo 9 

## Quizz Vidéo 9

## Exercices Vidéo 9


###################################################################

## Vidéo 10 (dict)

CO12AL-W2-VIDEO10.txt 

## Compléments Vidéo 10
*voir la construction D=dict(clef1=obj1, clef2=obj2) 
*voir d.get('marc', '?') et son usage par rapport à d['marc']
*voir un exemple de dict dans un dict et de l'accès à ses éléments D={'alice': 35, 'enfants':{'bob' : 9, 'charlie' : 6}}

## Quizz Vidéo 10

## Exercices Vidéo 10

###################################################################

## Vidéo 11 (set, frozenset)

CO12AL-W2-VIDEO11.txt 

## Compléments Vidéo 11
*autre fonctions sur les sets non vue dans la vidéo (e.g., <=, <, discard, pop, clear)
*test de performance sur le test d'appartenance entre list et set
pour expliquer qu'il faut toujours utiliser des sets
>>> timeit.timeit(setup= "x = range(2)", stmt = '"c" in x', number = 6000000)
1.042163089558322
>>> timeit.timeit(setup= "x = set(range(2))", stmt = '"c" in x', number = 6000000)
0.32964897792466274

>>> timeit.timeit(setup= "x = range(2)", stmt = '0 in x', number = 6000000)
0.3086782596151636
>>> timeit.timeit(setup= "x = set(range(2))", stmt = '0 in x', number = 6000000)
0.3819173343944584

## Quizz Vidéo 11

## Exercices Vidéo 11

###################################################################

## Vidéo 12 (références partagées)

CO12AL-W2-VIDEO12.txt 

## Compléments Vidéo 12
OK references-circulaires.ipynb : une liste infinie; un exemple + utile de reference circulaire
OK is-id.ipynb : function id(), operateur is,  les entiers implementes comme des singletons


* introduire http://pythontutor.com 
[[construire des exemples montrant des problèmes de ref partagées sur des mutables, e.g., 
a = [ 1, [2, 3], 4]
b = a[:]           #shallow copy
a[0] = 'x'        #ok
a[1][1] = 'y'     #ref partagée
]]

* voir copy.copy() pour faire les shallows copies et copy.deepcopy() pour les deep copy 
* voir sys.getrefcount(1) et expliquer le résultat 

## Quizz Vidéo 12

## Exercices Vidéo 12

*montrer le problème suivant L=[[1]]*5 et demander une solution pour ne pas avoir de ref. partagées

* exo pour voir jusqu'à quelle taille de chaîne de caractères (et quelle taille d'entier) Python arrête de faire des références partagées pour optimiser la mémoire. 
