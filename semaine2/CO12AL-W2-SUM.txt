# XXX j'utilise pour l'instant des noms plus simples qui  
# me permettent mieux de m'y retrouver, je renommerai le tout plus tard  

# ceci est  sans doute plutot pour la semaine 1
notebooks.ipynb : expliquer le fonctionnement des notebooks
notebook-vs-interpreter.ipynb : illustrer un bout de programme executé sous interpréteur, par python et sous notebook

## Vidéo 1 (objets, variables, typage dynamique)

CO12AL-W2-VIDEO01.txt

## Compléments Vidéo 1

noms-variables.ipynb : noms de variables

# deprecated-fonction-type.ipynb : la fonction type() id() operateur is, 
# les entiers implementes comme des singletons, type(type(x)==type(type(y))
# c'est bcp trop tot, je garde en reserve pour + tard

## Quizz Vidéo 1 

## Exercices Vidéo 1

###################################################################

## Vidéo 2 (types numériques : int, long, float, complex, bool)

CO12AL-W2-VIDEO02.txt

## Compléments Vidéo 2

calculette.ipynb : utiliser python comme une calculette - introduit aussi les conversions
# xxx TODO : affectations à la += ; est-ce prevu ailleurs ?
precision-flottants.ipynb : limitation de la précision des floats  
entiers-bitwise.ipynb : opérations bitwise : et/ou/ou exclusifs décalages 
affectations-operations : illustrer += et les autres variantes, mentionner les autres types

## Quizz Vidéo 2 
types-numeriques.quiz

## Exercices Vidéo 2 
exo-flottants-min.ipynb : exercice pour trouver la valeur approximative du + petit flottant 

###################################################################

## Vidéo 3 (séquences)

CO12AL-W2-VIDEO03.txt

## Compléments Vidéo 3 

# deprecated-slicing-step.ipynb : était un notebook sur les slicing avec pas (a:b:c)
# en fait cela etait couvert dans les slides mais je n'avais vu que la page 1

## Quizz Vidéo 3 

generic-slicing.quiz : opérations génériques sur les séquences en prenant une str comme exemple 

## Exercices Vidéo 3 
exo-slicing.ipynb: un peu de slicing, et des indices négatifs, le slicing avec pas, utilisation de la longueur

###################################################################

## Vidéo 4 (les listes)

CO12AL-W2-VIDEO04.txt (9 minutes)

## Compléments Vidéo 4 

XXX thierry: voir si on conserve la fin (qui passe une fonction en
# parametre...) à cet endroit ou si on bouge ça + tard dans le cours  
listes-sort.ipynb : sort avec les paramètres reverse et key, et sorted
#buffer : XXX thierry je connais pas du tout, et je n'ai pas de reseau pour l'instant

## Quizz Vidéo 4 
listes.quiz : pop append extend del sort sorted (XXX j'utilise aussi += a un moment)

## Exercices Vidéo 4 

###################################################################

## Vidéo 5 (les tuples)

CO12AL-W2-VIDEO05 ()

## Compléments Vidéo 5  

tuple-commas : les différentes syntaxes (avec ou sans parenthèses, avec ou sans virgule terminale)
	                  le cas des tuples à un élément
			  la fonction tuple pour convertir une liste 
			  digression sur les noms de fonctions prédéfinies

# discussion sur la virgule finale qui est optionnelle (sauf quand un seul élément) - pratique pour maintenir les fichiers sources, on peut toujours ajouter/supprimer une ligne entière
# comment accéder à l'entier 3 dans L=['abc', [(1,2), ([3], 4)], 5]
# affectation par tuple a,b = 1,2 -- application: inverser deux elements dans une liste
# construire un tuple : la fonction tuple ()

## Quizz Vidéo 5 
a-t-on le droit de modifier un tuple ?

## Exercices Vidéo 5 

###################################################################

## Vidéo 6 (101 if else)

CO12AL-W2-VIDEO06.txt (5 minutes 40 secondes)

## Compléments Vidéo 6
-expliquer <> et dire qu'il est obsolète mais qu'on le trouve dans du 
code ancien 

## Quizz Vidéo 6

## Exercices Vidéo 6

###################################################################

## Vidéo 7 (101 boucle for et fonctions)

CO12AL-W2-VIDEO07.txt 

## Compléments Vidéo 7 

## Quizz Vidéo 7

## Exercices Vidéo 7 

###################################################################

## Vidéo 8 (str)

CO12AL-W2-VIDEO08.txt 

## Compléments Vidéo 8 
*bytearray
*unicode
*Parler du l'opérateur % pour le formatage des chaînes (on ne doit plus l'utiliser, mais on le trouve encore dans du vieux code) et notamment des notations pour les décimaux %e, %f, %g et les variantes
*parler de rjust(), ljust(), center() et format()

# xxx Thierry : je serais favorable a introduire aussi quelques outils 
# de base sur les strings, comme strip, split, index 
# xxx Arnaud : je parle de split dans le cours, mais bien sur, ma liste est juste 
# une proposition (non exhaustive), strip et index sont très important aussi. 
* davantages de conversions : chr - ord  (quoique ce serait peut-être mieux + tard, genre sujets avancés aussi) 


## Quizz Vidéo 8

## Exercices Vidéo 8

###################################################################

## Vidéo 9 (tables de hash)

CO12AL-W2-VIDEO09.txt 

## Compléments Vidéo 9 

## Quizz Vidéo 9

## Exercices Vidéo 9


###################################################################

## Vidéo 10 (dict)

CO12AL-W2-VIDEO10.txt 

## Compléments Vidéo 10
*voir la construction D=dict(clef1=obj1, clef2=obj2) 
*voir d.get('marc', '?') et son usage par rapport à d['marc']
*voir un exemple de dict dans un dict et de l'accès à ses éléments D={'alice': 35, 'enfant':{'bob' : 9, 'charlie' : 6}}

## Quizz Vidéo 10

## Exercices Vidéo 10

###################################################################

## Vidéo 11 (set, frozenset)

CO12AL-W2-VIDEO11.txt 

## Compléments Vidéo 11
*autre fonctions sur les sets non vue dans la vidéo (e.g., <=, <, discard, pop, clear)
*test de performance sur le test d'appartenance entre list et set
pour expliquer qu'il faut toujours utiliser des sets
>>> timeit.timeit(setup= "x = range(2)", stmt = '"c" in x', number = 6000000)
1.042163089558322
>>> timeit.timeit(setup= "x = set(range(2))", stmt = '"c" in x', number = 6000000)
0.32964897792466274

>>> timeit.timeit(setup= "x = range(2)", stmt = '0 in x', number = 6000000)
0.3086782596151636
>>> timeit.timeit(setup= "x = set(range(2))", stmt = '0 in x', number = 6000000)
0.3819173343944584

## Quizz Vidéo 11

## Exercices Vidéo 11

###################################################################

## Vidéo 12 (références partagées)

CO12AL-W2-VIDEO12.txt 

## Compléments Vidéo 12
references-circulaires.ipynb : une liste infinie; un exemple + utile de reference circulaire

* introduire http://pythontutor.com 
[[construire des exemples montrant des problèmes de ref partagées sur des mutables, e.g., 
a = [ 1, [2, 3], 4]
b = a[:]                  #shallow copy
a[0] = 'x'        #ok
a[1][1] = 'y'     #ref partagée
]]

* voir copy.copy() pour faire les shallows copies et copy.deepcopy() pour les deep copy 
* voir sys.getrefcount(1) et expliquer le résultat -- sans doute moyen de refourguer le morceau de fonction-type.ipynb sur les entiers comme singletons

## Quizz Vidéo 12

## Exercices Vidéo 12

*montrer le problème suivant L=[[1]]*5 et demander une solution pour ne pas avoir de ref. partagées

* exo pour voir jusqu'à quelle taille de chaîne de caractères (et quelle taille d'entier) Python arrête de faire des références partagées pour optimiser la mémoire. 
