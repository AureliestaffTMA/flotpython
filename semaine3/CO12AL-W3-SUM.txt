###################################################################

## Vidéo 1 (101 des modules)

CO12AL-W3-VIDEO01.txt

## Compléments Vidéo 1

-ajouter un lien vers la Python Standard Library

## Quizz Vidéo 1

## Exercices Vidéo 1


###################################################################

## Vidéo 2 (indentation comme syntaxe de base)

CO12AL-W3-VIDEO02.txt

## Compléments Vidéo 2

-ajouter un lien vers la PEP 008 (sur les conventions de codage)
-ajouter un lien vers cette FAQ https://docs.python.org/2/faq/design.html#why-are-colons-required-for-the-if-while-def-class-statements

## Quizz Vidéo 2

## Exercices Vidéo 2


###################################################################

## Vidéo 3 (if elif else + and/or/not)

CO12AL-W3-VIDEO03.txt

## Compléments Vidéo 3

## Quizz Vidéo 3

## Exercices Vidéo 3

-opérateurs de tests booléens and, or, not (vu en cours, montrer
d'autres exemples)
-opération shortcircuit and et or (vu en cours, montrer d'autres exemples)
-discuter de == : quand peut-on comparer des objets de types différents
(seulement les numériques, et les set et frozenset, mais
(1, 2) n'est pas égal à [1, 2])
-quel sens à des comparaisons (avec < ou >) de listes ou dicts. 


###################################################################

## Vidéo 4 (boucle for et itérateurs)

CO12AL-W3-VIDEO04.txt

## Compléments Vidéo 4

-présenter break
-présenter continue (en expliquant que, comme pour les goto, les sauts
dans le code nuisent à la compréhension, il faut donc l'éviter)
-présenter pass qui est utilisé pour rendre syntaxiquement correct un bloc
de code que l'on n'a pas encore écrit (voir pour les fonctions, for, if)
-voir le else du for
-présenter enumerate, zip, et les itérateurs des dictionnaires
-présenter xrange() et sont avantage par rapport à range() (pas 
d'occupation mémoire). Dans le même esprit expliquer l'avantage
des itérateurs sur des dict (iteritems/itervalues/iterkeys) par rapport
aux listes. 
-présenter la méthode built-in iter() en expliquant que comme
__iter__() est une méthode Python privée, on ne doit pas l'appeler
directement dans un programme, on doit utiliser la built-in iter()
à la place.

## Quizz Vidéo 4

## Exercices Vidéo 4

Il ne faut pas modifier l'objet sur lequel on itère dans boucle for.
Si on modifier l'objet, il faut itérer sur copie
>>> L = ['a', 'b' , 'c']
>>> for i in L[:]:
	if i == 'c':
		L.append(i)	

Ici, sinon on a une boucle infinie.

###################################################################

## Vidéo 5 (files)

CO12AL-W3-VIDEO05.txt

## Compléments Vidéo 5

*donner le lien vers https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files
*exemple de flush()
*voire read, tell, seek, writelines
*introduire json et pickle
*inroduire le mode b pour ouvrir des fichiers binaires et les autres
modes utilise (e.g., a, r+)
*expliquer pourquoi le fichier est un itérateur et n'a pas des itérateurs
comme les autres types built-in (c'est lié à la manières des OS de gérer
les accès aux fichiers). 
*introduire sys.stdout (comparer avec print), sys.stdin (comparer 
sys.stdin.readline() avec raw_input), et sys.stderr
*montrer que sys.stdout n'est q'une variable qui peut référencer un 
autre fichier. Comme print écrit dans sys.stdout, c'est un moyen simple
de rediriger les print vers un fichier. 
*en complément introduire le module logging (ça va bien ici, mais
si ça fait trop de compléments, on peut le bouger en semaine 6 ou 7)
avec les références https://docs.python.org/2/library/logging.html
et https://docs.python.org/2/howto/logging.html#logging-basic-tutorial



## Quizz Vidéo 5

## Exercices Vidéo 5


###################################################################

## Vidéo 6 (while)

CO12AL-W3-VIDEO06.txt

## Compléments Vidéo 6
-voir le break et le continue (déjà vu pour for, mais
à revoir dans le contexte du while)
-voir le else du while


## Quizz Vidéo 6

## Exercices Vidéo 6

x='spam'
while x:
    print x
    x = x[1:]




###################################################################

## Vidéo 7 (fonction lambda, map, filter)

CO12AL-W3-VIDEO07.txt

## Compléments Vidéo 7

*voir reduce 

## Quizz Vidéo 7

## Exercices Vidéo 7

*faire de beaux exemples pratiques d'application de map et filter


###################################################################

## Vidéo 8 (compréhension listes, set, dictionnaires)

CO12AL-W3-VIDEO08.txt

## Compléments Vidéo 8

*Comparer la performance des boucles for, de map, de la compréhension. 
S'inspirer de :
http://www-sop.inria.fr/members/Arnaud.Legout/EDU/Python/performanceFonctions2.py

*Donner le lien vers http://python-history.blogspot.fr/2010/06/from-list-comprehensions-to-generator.html 
pour une discussion intéressante sur la compréhension, les expression
génératrice et Python 2 et 3.

*montrer le cas d'une compréhension sur plusieurs variables et montrer
comment lire cette expression, par exemple, 
[(x,y) for x in range(5) if x % 2 == 0 
	     for y in range(5) if y % 2 == 1]


L = []
for x in range(5):
    if x % 2 == 0:
        for y in range(5):
            if y % 2 == 1:
                L.append((x,y))


Expliquer que la compréhension sur plusieurs variables est difficile
à lire et que c'est par conséquent une mauvaise idée en général.

## Quizz Vidéo 8

## Exercices Vidéo 8


###################################################################

## Vidéo 9 (fonctions : objet, passage d'arguments par ref, return, polymorphisme)

CO12AL-W3-VIDEO09.txt

## Compléments Vidéo 9

* cas pratique de plusieurs return 
* effet de bord du passage par ref de mutable (illustration de la video)
* expliquer comment ne pas modifier un mutable passé en argument:
reprendre l'exemple de la video

L = []
def h(a):
	a.append(1)

Comment ne pas modifier L. Trois possibilité:
-à l'appel h(L[:]) on passe une shallow copy, ça permet
de choisir la modification par effect de bord à l'appel
(peut-être utile lorsque la fonction fait autre chose avec L)
-à l'appel si on veut une exception en cas de tentative
de modification (utile pour les librairies) h(tuple(L))
-dans h en ajoutant a = a[:] avant le append pour garantir
que h ne modifiera jamais L. 
## Quizz Vidéo 9

## Exercices Vidéo 9


###################################################################

## Vidéo 10 (fonctions : scope des variables, global, regle LEGB)

CO12AL-W3-VIDEO010.txt

## Compléments Vidéo 10

## Quizz Vidéo 10

## Exercices Vidéo 10


###################################################################

## Vidéo 11 

## Compléments Vidéo 11

## Quizz Vidéo 11

## Exercices Vidéo 11


###################################################################

