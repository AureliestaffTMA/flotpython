# -*- fill-column: 54 -*-
#
## FORMAT DU FICHIER
## Tout ce qui commence avec un ## est un commentaire
##
## le texte entre double crochets ouvrants et fermants
## est à afficher en surimpression pendant que je parle et à 
## synchroniser avec le texte entre crochet 

## TITRE : Tables de hash

## Résumé de la semaine

## Sujet de la semaine ()

# XXX je ne vois pas du tout ce que ceci vient faire la
on n'a pas encore parle d'iterateurs et d'espaces de nommage...XXX
En Python tout est un objet. C'est une caractéristique centrale de
Python qui permet une grande uniformité dans la syntaxe, et donc une
grande simplicité de programmation. Je vous rappelle qu'autour de
cette notion d'objet s'articulent les trois notions clefs : [les
références partagées], [les itérateurs], et [les espaces de nommage].
[[ références partagées itérateurs espace de nommage ]]

Nous avons vu la semaine dernière certains types de base.
Cette semaine nous allons couvrir les derniers types de base
qu'il nous reste à voir, notamment les dictionnaires et les ensembles, 
puis nous reviendrons sur le typage dynamique et nous discuterons
des références partagées. Pour finir, nous approfondirons le 
fontionnement des test if/else et des boucles for avec en particulier
une présentation des itérateurs.
xxx pas la peine de dire cote utilisateur xxx

## tables de hash
Nous avons vu jusqu'à maintenant les types séquences qui sont
des types très puissants combinant souplesse et facilité d'utilisation. 
Mais est-ce qu'il y a des limitations à l'utilisation des types 
séquences. 
Ouvrons un terminal interactif pour répondre à cette question...

>>>>>>>>>> CO12AL-W3-VIDEO01-EXO01.py <<<<<<<<<<

>>>>>>>>>> CO12AL-W3-VIDEO01-SLIDE01.pptx (5 minutes) <<<<<<<<<<

Comme la fonction de hash fait un calcul sur la valeur de la clef
et que pour une même clef, elle doit toujours donner
la même case dans le tableau, une clef doit toujours être immuable. 
Donc une clef en Python peut-être, par exemple, un type numérique, 
une chaîne de caractères, ou un tuple d'immuable. 

Il existe en Python deux implémentations de tables de hash, ce sont
les dictionnaires et les ensembles. Nous verrons comment utiliser ces
deux nouveaux types dans la prochaine vidéo
